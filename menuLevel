using System.Collections;
using System.Collections.Generic;
using System.Security.Cryptography;
using UnityEngine;
using UnityEngine.UI;
using DG.Tweening;

public class GameManager : MonoBehaviour

{
    [SerializeField]
    private GameObject squarePrefab;

    [SerializeField]
    private Transform squarePanel;

    private GameObject[] squareArrays = new GameObject[25];
    // Start is called before the first frame update

    [SerializeField]
    private Transform questıonPanel;

    [SerializeField]
    private Text questionText;

    [SerializeField]
    private Sprite[] squareSprites;


    List<int> ListofPartıtıonValues = new List<int>();

    int dıvıdend, dıvısor;
    int whıchquestıon;
    int buttonValue;
    int trueResult;

    bool IstheButtonPressed;

    int lastHeal;

    string TheDifficultyofTheProblem;

    LastHealthManager lastHealthManager;

    pointManager PointManager;

    GameObject CurrentSquare;

    private void Awake()
    {
        lastHeal = 3;

        lastHealthManager = Object.FindObjectOfType<LastHealthManager>();

        PointManager = Object.FindObjectOfType<pointManager>();

        lastHealthManager.checkLasthealth(lastHeal);

    }

    void Start()
    {
        IstheButtonPressed = false;
        questıonPanel.GetComponent<RectTransform>().localScale = Vector3.zero;
        makesquare();
    }

    public void makesquare()
    {
        for(int i=0; i<25; i++)
        {
            
            
           GameObject square = Instantiate(squarePrefab, squarePanel);
           square.transform.GetChild(1).GetComponent<Image>().sprite = squareSprites[Random.Range(0,squareSprites.Length)];
           square.transform.GetComponent<Button>().onClick.AddListener(() => ClickButton());
           squareArrays[i] = square;

        }

        PrintSectionValueinText();

        StartCoroutine(DoFadeRoutine());

        Invoke("OpenquestıonPanel", 2f);

    }

    void ClickButton()
    {
        if (IstheButtonPressed)
        {
            buttonValue = int.Parse(UnityEngine.EventSystems.EventSystem.current.currentSelectedGameObject.transform.GetChild(0).GetComponent<Text>().text);

            CurrentSquare = UnityEngine.EventSystems.EventSystem.current.currentSelectedGameObject;


            checkResult();
        }
    }

    void checkResult()
    {
        if(buttonValue == trueResult)
        {
            CurrentSquare.transform.GetChild(1).GetComponent<Image>().enabled = true;
            CurrentSquare.transform.GetChild(0).GetComponent<Text>.text = "";
            CurrentSquare.transform.GetComponent<Button>().interactable = false;
            PointManager.IncreasePoint(TheDifficultyofTheProblem);
            ListofPartıtıonValues.RemoveAt(whıchquestıon);
            Debug.Log(ListofPartıtıonValues.Count);
            OpenquestıonPanel();
            if(ListofPartıtıonValues.Count>0)
            {
                OpenquestıonPanel();

            }
            else
            {
                TheEnd();
            }
        }
        else
        {
            lastHeal--;
            lastHealthManager.checkLasthealth(lastHeal);
        }
        if (lastHeal<=0)
        {
            TheEnd();
        }
    
    }

    void TheEnd()
    {
        Debug.Log("The end");
    }

    IEnumerator DoFadeRoutine()
    {
        foreach (var squarePrefab in squareArrays)
        {
            squarePrefab.GetComponent<CanvasGroup>().DOFade(1, .2f);
            

            yield return new WaitForSeconds(0.07f);



        }
    }

    void PrintSectionValueinText()
    {
        foreach (var squarePrefab in squareArrays)
        {
            int randomValue = Random.Range(1, 13);

            ListofPartıtıonValues.Add(randomValue);

            squarePrefab.transform.GetChild(0).GetComponent<Text>().text = randomValue.ToString();

        }

        //Debug.Log(ListofPartıtıonValues[0]);
    }

    void OpenquestıonPanel()
    {
        Askquestıon();
        IstheButtonPressed = true;
        questıonPanel.GetComponent<RectTransform>().DOScale(1, 0.3f).SetEase(Ease.OutBack);
    }

    void Askquestıon()
    {
        dıvısor = Random.Range(2, 11);

        whıchquestıon = Random.Range(0, ListofPartıtıonValues.Count);

        trueResult = ListofPartıtıonValues[whıchquestıon];

        dıvıdend = dıvısor * trueResult ;

        if(dıvıdend <= 40 )
        {
            TheDifficultyofTheProblem = "easy";

        }

        else if (dıvıdend>40 && dıvıdend <= 80 )
        {
            TheDifficultyofTheProblem = "middle";
        }

        else
        {
            TheDifficultyofTheProblem = "hard";
        }


        questionText.text = dıvıdend.ToString() + ":" + dıvısor.ToString();

    }
}
